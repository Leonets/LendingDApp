# In questo modo la dApp definition (l'address che è anche l'owner del componente) afferma che le entities elencate
# (componenti e risorse) sono di sua gestione.

# Questo deve essere 'controfirmato' dai componenti e dalle risorse stesse che devono confermare che 'appartengono'
# a tale account id (dapp_definition)

SET_METADATA
    Address("$DAPP_ID$")
    "claimed_entities"
    Enum<136u8>(
        Array<Address>(
            Address("$VITE_COMP_ADDRESS$"),
            Address("$VITE_OWNER_BADGE$"),
            Address("$VITE_ADMIN_BADGE$"),
            Address("$VITE_STAFF_BADGE_ADDRESS$"),
            Address("$VITE_BENEFACTOR_BADGE_ADDRESS$"),
            Address("$VITE_BAD_PAYER_RESOURCE_ADDRESS$"),
            Address("$VITE_LND_TOKEN_ADDRESS$"),
            Address("$VITE_LND_RESOURCE_ADDRESS$")
        )
    )
;


# Questa è la controfirma, cioè l'associazione della dapp_definition al componente, tramite l'uso dell'owner badge
CALL_METHOD
    Address("account_tdx_2_128gpncka85tmpztygfc7ewjrzvvgyc9mlnc47uxtxlk0av0ngp2anz")
    #Address("OWNER_ADDRESS_DEL_CONTRATTO")
    "create_proof_of_amount"    
    Address("$VITE_OWNER_BADGE$")
    #Address("OWNER_BADGE")
    Decimal("1");
SET_METADATA
    Address("$VITE_COMP_ADDRESS$")
     #Address("COMP_ADDRESS")
    "dapp_definition"
    Enum<8u8>(
        Address("$DAPP_ID$")
        #Address("DAPP_ID")
    )
;







# e questa è invece la controfirma di tutte le risorse (create proof utilizza l'indirizzo dell'owner badge)
# sul badge owner non funziona
# Unauthorized(Unauthorized { failed_access_rules: RoleList([(RoleKey { key: \'metadata_setter\' }, [DenyAll]
CALL_METHOD
    Address("account_tdx_2_128gpncka85tmpztygfc7ewjrzvvgyc9mlnc47uxtxlk0av0ngp2anz")
    #Address("OWNER_ADDRESS_DEL_CONTRATTO")
    "create_proof_of_amount"    
    Address("$VITE_OWNER_BADGE$")
    #Address("OWNER_BADGE")
    Decimal("1");
SET_METADATA
    Address("$VITE_OWNER_BADGE$")
    #Address("OWNER_BADGE")
    "dapp_definitions"
    Enum<136u8>(
        Array<Address>(
            Address("$DAPP_ID$")
            #Address("DAPP_ID")
        )
    )
;



# e questa è invece la controfirma di tutte le risorse (create proof utilizza l'indirizzo dell'owner badge)
# sul badge admin funziona
CALL_METHOD
    Address("account_tdx_2_128gpncka85tmpztygfc7ewjrzvvgyc9mlnc47uxtxlk0av0ngp2anz")
    #Address("OWNER_ADDRESS_DEL_CONTRATTO")
    "create_proof_of_amount"    
    Address("$VITE_OWNER_BADGE$")
    #Address("OWNER_BADGE")
    Decimal("1");
SET_METADATA
    Address("$VITE_ADMIN_BADGE$")
    #Address("ADMIN_BADGE")
    "dapp_definitions"
    Enum<136u8>(
        Array<Address>(
            Address("$DAPP_ID$")
            #Address("DAPP_ID")
        )
    )
;



# sui due badge benefactor e staff invece funziona
CALL_METHOD
    Address("account_tdx_2_128gpncka85tmpztygfc7ewjrzvvgyc9mlnc47uxtxlk0av0ngp2anz")
    #Address("OWNER_ADDRESS_DEL_CONTRATTO")
    "create_proof_of_amount"    
    Address("$VITE_OWNER_BADGE$")
    #Address("OWNER_BADGE")
    Decimal("1");
SET_METADATA
    Address("$VITE_STAFF_BADGE_ADDRESS$")
    #Address("STAFF_BADGE")
    "dapp_definitions"
    Enum<136u8>(
        Array<Address>(
            Address("$DAPP_ID$")
            #Address("DAPP_ID")
        )
    )
;
SET_METADATA
    Address("$VITE_BENEFACTOR_BADGE_ADDRESS$")
    #Address("BENEFACTOR_BADGE_ADDRESS")
    "dapp_definitions"
    Enum<136u8>(
        Array<Address>(
            Address("$DAPP_ID$")
            #Address("DAPP_ID")
        )
    )
;

# e su questi nemmeno
# Unauthorized(Unauthorized { failed_access_rules: RoleList([(RoleKey { key: \'metadata_setter\' }, [DenyAll])]
#lnd token
CALL_METHOD
    Address("account_tdx_2_128gpncka85tmpztygfc7ewjrzvvgyc9mlnc47uxtxlk0av0ngp2anz")
    #Address("OWNER_ADDRESS_DEL_CONTRATTO")
    "create_proof_of_amount"    
    Address("$VITE_OWNER_BADGE$")
    #Address("OWNER_BADGE")
    Decimal("1");
SET_METADATA
    Address("$VITE_LND_TOKEN_ADDRESS$")
    #Address("LND_TOKEN")
    "dapp_definitions"
    Enum<136u8>(
        Array<Address>(
            Address("$DAPP_ID$")
            #Address("DAPP_ID")
        )
    )
;

#nft manager
CALL_METHOD
    Address("account_tdx_2_128gpncka85tmpztygfc7ewjrzvvgyc9mlnc47uxtxlk0av0ngp2anz")
    #Address("OWNER_ADDRESS_DEL_CONTRATTO")
    "create_proof_of_amount"    
    Address("$VITE_OWNER_BADGE$")
    #Address("OWNER_BADGE")
    Decimal("1");
SET_METADATA
    Address("$VITE_LND_RESOURCE_ADDRESS$")
    #Address("LEND_NFT_MANAGER")
    "dapp_definitions"
    Enum<136u8>(
        Array<Address>(
            Address("$DAPP_ID$")
            #Address("DAPP_ID")
        )
    )
;


#BAD_PAYER
CALL_METHOD
    Address("account_tdx_2_128gpncka85tmpztygfc7ewjrzvvgyc9mlnc47uxtxlk0av0ngp2anz")
    #Address("OWNER_ADDRESS_DEL_CONTRATTO")
    "create_proof_of_amount"    
    Address("$VITE_OWNER_BADGE$")
    #Address("OWNER_BADGE")
    Decimal("1");
SET_METADATA
    Address("$VITE_BAD_PAYER_RESOURCE_ADDRESS$")
    #Address("BAD_PAYER")
    "dapp_definitions"
    Enum<136u8>(
        Array<Address>(
            Address("$DAPP_ID$")
            #Address("DAPP_ID")
        )
    )
;
